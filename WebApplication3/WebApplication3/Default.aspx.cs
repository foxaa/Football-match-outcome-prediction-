using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Web.Script.Serialization;
using System.Diagnostics;
using System.Collections;
using System.IO.Ports;

namespace WebApplication3
{
    public partial class Default : System.Web.UI.Page
    {

        //SerialPort ardo;

        protected String sas { get; set; }

        protected String sas2 { get; set; }

        protected String sas3 { get; set; }

        protected void Page_Load(object sender, EventArgs e)
        {
            //ardo = new SerialPort();

        }

        // C# classes generated from JSON
        // They were generated by copying the return JSON from the ML web service
        // and using Visual Studio: Edit - Paste Special - Paste JSON as classes.
        // This does not generate all the JsonProperty however. These were added manually.
        
        public class Rootobject
        {
            [JsonProperty("results")]
            public Results Results { get; set; }
            
        }

        public class Results
        {
            [JsonProperty("output1")]
            public Output1 output1 { get; set; }

        }

        public class Output1
        {
            [JsonProperty("value")]
            public string type { get; set; }
            public Value value { get; set; }
        }

        public class Value
        {
            [JsonProperty("columnnames")]
            public string[] ColumnNames { get; set; }
            [JsonProperty("columntypes")]
            public string[] ColumnTypes { get; set; }
            [JsonProperty("values")]
            public string[][] Values { get; set; } //jagged array(array array-ova)
        }

        // Pocetak Azure Machine Learning web service 
        public class StringTable
        {
            public string[] ColumnNames { get; set; }
            public string[,] Values { get; set; }  //dvodimenzionalni array
        }

    



        // public keyword ispred async
        // "string[] inputparams, Label label" dodani funkciji
        public async Task InvokeRequestResponseService(string[] inputparams, Label label)
        {
            using (var client = new HttpClient())
            {
                var scoreRequest = new
                {

                    Inputs = new Dictionary<string, StringTable>() {
                        {
                            "input1",
                            new StringTable()
                            {
                                // inputi po redu kao u Azure ML-u
                               ColumnNames = new string[] {"%HY", "%AY", "%HC","%AC","%FTHgoal","%FTAgoal"},
                               // broj inputa
                               Values = new string[,] {  { inputparams[0], inputparams[1], inputparams[2], inputparams[3], inputparams[4], inputparams[5] },  }
                            }
                        },
                    },
                    GlobalParameters = new Dictionary<string, string>()
                    {
                    }
                };
                // API key sa stranice nakon deploya
                const string apiKey = "+HNs+lFNNUUTLy2N4QkA0Yxu95QHGSrkaChC+zlkFd1acDjrR8+/dnUp2JBa/rw8ldK+/xPOop06kO/XjYB4OA=="; 
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);

                // request/response uri
                client.BaseAddress = new Uri("https://ussouthcentral.services.azureml.net/workspaces/ddcfabb9d3e4439d9317950ea09a0b48/services/8a36f6682648412fada67156eefb74d8/execute?api-version=2.0&details=true");

                
                HttpResponseMessage response = await client.PostAsJsonAsync("", scoreRequest).ConfigureAwait(false);

                if (response.IsSuccessStatusCode)
                {
                    string result = await response.Content.ReadAsStringAsync();

                    // The following lines were added:
                    JavaScriptSerializer ser = new JavaScriptSerializer();

                    // This deserialization will only work if the corresponding C# classes are defined for JSON.
                    Rootobject myresults = ser.Deserialize<Rootobject>(result);

                   

                    var score = myresults.Results.output1.value.Values; //from C# classes defined above from JSON output


                    string scoredlabels = score[0][3];

                    string scoredprobabilities0 = score[0][0]; //u Jsonu je prvo probability za D, pa H i na kraju A
                    string scoredprobabilities1 = score[0][1];
                    string scoredprobabilities2 = score[0][2];

                    /*sas = Double.Parse(scoredprobabilities0);
                    sas2 = Double.Parse(scoredprobabilities1);
                    sas3 = Double.Parse(scoredprobabilities2);*/

                    sas = scoredprobabilities0;
                    sas2 = scoredprobabilities1;
                    sas3 = scoredprobabilities2;

                    //System.IO.File.WriteAllText(@"C:\Users\umiljs\Documents\WriteLines.json", result);

                    

                    if (scoredlabels == "0")
                    {
                        label.Text = "Najveca je vjerojatnost da ce biti remi" + " " + scoredprobabilities0;
                    }
                    else if(scoredlabels == "1")
                    {
                        label.Text = "Najveca je vjerojatnost da ce biti pobjeda domacina"+ " " + scoredprobabilities1;
                    }
                    else
                    {
                        label.Text = "Najveca je vjerojatnost da ce biti pobjeda gostujuce ekipe"+ " "+ scoredprobabilities2;
                    }
                }
                else
                {
                    //Krivi api key, fale vrijednosti itd.
                    label.Text = response.ToString();

                }
            }

        }
        protected void Button1_Click(object sender, EventArgs e)
        {
            //8 textboxova koje smo kreirali za unos inputa

            string[] inputparams = new string[] { TextBox1.Text, TextBox2.Text, TextBox5.Text, TextBox6.Text, TextBox7.Text, TextBox8.Text };

             
            //label kao drugi parametar da bi prikazali dobivenu vrijednost tj output 
            InvokeRequestResponseService(inputparams, Label1).Wait();
        }



    }
}